package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _bashenv_bash_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x5f\x6b\xdb\x30\x14\xc5\x9f\x97\x4f\x71\x22\x02\xde\x60\x89\x61\xe4\x29\x23\x81\x84\x6d\x64\x2f\xf1\x58\xc6\x68\x09\xa1\x28\xf2\x75\x2c\x2a\x4b\x45\x57\x26\xcd\xb7\xaf\xe4\x36\xc5\x4d\xfb\x64\xa3\x7b\xce\xef\xdc\x3f\x03\x5d\x61\xb7\x83\x18\xad\x96\xdb\xf5\xdd\xff\x9f\x7f\xb7\xbf\x37\xbf\x0a\x81\xb1\x09\x10\x53\x81\xfd\xfe\x3b\x42\x4d\x76\xf0\x89\x54\xed\x20\x86\x43\xdc\xba\xd6\x83\xcf\x1c\xa8\xc1\x4a\x72\x0d\xcd\x70\x6d\x80\xab\x50\xca\x40\x33\xf4\x58\xc5\x46\xf4\x9c\x7f\x0c\x49\x26\xb4\x0f\x47\x2f\x4b\x42\x70\xcf\xfe\x29\x9c\xc7\xd1\x53\x34\xfb\x49\xd4\x5f\x5a\xfa\xdc\x5a\xd9\xd0\x17\x81\xf9\x1c\xe2\x87\xf4\x27\x6d\xfb\x0d\x75\xdc\x97\x0f\x44\x61\x51\x6c\x71\xf3\x15\x6d\x4c\x58\xbb\x86\x0e\x9e\x4e\x29\x42\x5b\x0e\xd2\x18\x98\x88\xe7\xd0\x25\xce\xc4\xc5\x96\x01\x18\xa1\x93\x5e\x74\x87\x28\xc8\xae\xe9\xff\x62\x22\x64\x59\x42\x87\xc4\xcc\x29\xa8\x9c\x6b\x32\x86\x21\x6d\x09\x55\x4b\x7b\x24\x9c\xd3\x66\x62\xbe\xcf\x18\x5d\xf5\x3a\x88\xdb\xd2\xc5\x0a\xc6\x0a\xa2\x7b\xce\x5b\xf6\xb9\x71\x4a\x9a\xfc\xa0\x6d\x9e\xb2\xb1\x58\xf4\xf9\x22\x7b\x8b\x50\x75\xf2\xf3\x47\xce\x77\x5d\x2f\x61\xd3\x0e\xc8\x37\xda\x4a\x03\x26\x66\xed\x6c\xba\x57\xda\x60\x2c\xaa\xf8\x22\xfd\x39\x8d\x14\xe4\x3d\x81\xaa\x8a\x54\x98\x88\x57\x50\xa5\xe3\xf9\x1e\xe3\xd0\xdf\x06\xf1\xf7\x29\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenv_bash_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_bash_bash,
		"bashenv/bash.bash",
	)
}

func bashenv_bash_bash() (*asset, error) {
	bytes, err := bashenv_bash_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1426170253, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _bashenv_cmd_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x73\x9b\x3c\x10\x3d\xc3\xaf\xd8\x4f\x51\x32\xc9\x81\xe1\xc3\xa7\x0e\x1e\x77\x9c\x69\x7b\x6b\x7b\xc9\xd1\x38\x33\x2a\x88\xc0\x58\x16\x1e\x84\xdd\x74\x30\xff\xbd\xbb\x42\x60\x88\x7d\x6a\x2e\x46\xbb\xab\xdd\xf7\x9e\xde\xc6\xcf\x64\xaa\x44\x2d\x21\x78\x86\x2f\x3f\xbe\xbe\xf8\x7e\xba\xcf\x02\x55\x9a\xe6\xf1\x09\x5a\xdf\x1b\xd2\x99\x34\xe9\x8a\x7d\xc7\xb8\x01\x71\x12\xa5\x12\xbf\x94\x84\xb4\xda\xef\x85\xce\x0c\xbb\x14\x6a\xb3\x62\x3c\xc2\xc0\xd0\x27\xd8\xc9\x3f\x06\x18\xd7\x86\xc1\x19\x8c\xcc\x80\x99\x10\x4f\x71\x18\x32\xbf\xbb\xcc\xb3\x75\xf3\xa1\x63\xaf\xbc\xaa\x61\x07\xa5\xc6\x36\xed\x7f\x04\x73\xb3\xde\x76\x6c\x09\x59\xe5\x7b\x9e\x4c\x8b\x0a\x13\x3b\x02\x51\x69\x89\x43\xde\x6a\x79\x00\xf6\x4a\x43\xec\xcc\xaa\x6e\x66\x93\xb4\x9b\xf3\x2f\x6d\x83\x13\xc4\x1f\x7a\xca\xf7\x03\x9e\x6e\xe9\xf5\xcd\x66\x50\x31\xc8\x8f\x3a\x6d\xca\x4a\x83\xa0\x93\xd3\x6d\x22\x5b\xae\x2d\x55\x4c\xe3\x6f\xbb\x88\x03\x1e\x75\x98\x56\x55\x2a\x94\xd5\xc1\xa9\xa0\x09\x2e\x7f\x9c\x50\x79\x9a\xe3\xcd\x35\x9b\x2a\x10\x30\x78\xf8\x0c\x61\x26\x4f\xa1\x3e\x2a\x05\x0f\x0f\xbd\xaa\xda\xd1\xf2\x3d\xcb\x9b\x9e\x27\xe6\xad\x30\xe1\x1d\x7e\x05\x61\xc7\xb6\x2b\xdb\x6b\xce\x71\x54\xee\xc3\x0b\x39\xba\x7c\x81\x5d\xe5\x09\x11\x63\x90\x0a\x01\x71\xcd\x14\x49\x18\xa7\xdf\x04\xeb\xac\x41\xb4\x01\x1e\x41\xc2\x12\xbe\x4e\x50\x78\xdf\xeb\x9c\x73\xfa\x79\xd0\x3f\xbf\x83\x18\x59\x50\xd1\x88\x69\x00\x73\x11\x09\x93\x4b\x30\x45\x99\x37\x30\x84\xb1\x70\x16\x3f\x9f\xa1\xa9\x8f\x72\x48\x9b\x46\x34\x47\xb3\xfa\xdf\xf7\xca\x1c\x06\x55\x47\xb7\x5a\x19\x5f\x39\xc6\x13\x3e\xd3\x71\x09\x4d\x21\x35\x92\xe0\xed\x44\x3f\xac\x63\xdb\x0e\x6f\xaf\x49\x07\x65\x70\x0a\xb5\xdd\x6c\x30\x44\x39\xd8\x6e\xc7\x8b\xee\xbd\x7e\x56\x60\x8e\x69\x31\x38\x22\x06\x5b\x48\x79\x87\x6c\x41\x4f\xab\x86\x2e\x04\xeb\xba\x09\x7f\xcc\x75\x40\xba\xf6\x15\x4f\x74\x3f\x2f\x9d\x27\x46\x6b\x3c\x5f\xad\x6d\x6c\x0b\xd1\x55\x38\x73\xee\x2b\xd7\xc8\x59\xcb\x3b\xd4\xa5\x6e\x72\x60\x00\xf7\xc1\xe2\x93\x81\x7b\x93\xa0\xcd\x1c\xa9\xd9\xf8\x6b\x39\x7a\x38\xbd\xd7\x46\x40\xef\x65\x03\xbc\x67\xe8\x13\x54\xf7\xa2\x85\x54\x87\x5b\x7b\xf4\x52\x54\xbf\x0d\x50\x16\x61\x22\xe0\xbd\xb0\xbb\x44\xd0\x6f\x2d\x93\xa8\xdf\xc8\x0c\xf4\x0a\x83\x70\x14\x9a\x48\x07\xf8\x37\x30\x27\x92\xd6\x13\xf4\x81\x8b\x7e\x07\x4a\xa0\x02\x78\xa3\x2f\x9b\xd8\xab\xa5\x36\xe1\x3d\x31\x0b\xe9\x1f\x45\x1f\xd4\x18\x82\xf9\x19\xc2\x00\x9d\x3c\xb9\x6e\xf7\xfb\x86\x38\x0e\x89\x0e\x88\x97\x5b\xdf\x68\x34\x8f\x5b\x11\xbb\xfc\x24\xd2\x64\x33\x06\xb9\xac\x2a\xfe\xdf\x00\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenv_cmd_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_cmd_bash,
		"bashenv/cmd.bash",
	)
}

func bashenv_cmd_bash() (*asset, error) {
	bytes, err := bashenv_cmd_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1426170253, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _bashenv_fn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x41\x6e\xc2\x30\x10\x3c\xc7\xaf\x18\xad\x22\x01\xaa\xa2\x08\xae\x34\x3d\x56\xea\x1b\x28\x07\xcb\xac\x89\xd5\xd4\x89\x6c\x03\xaa\x28\x7f\xef\x1a\xd2\x92\x43\x55\x55\xb9\x64\x77\x66\x67\x76\xd6\xca\xfa\x4a\x87\x7d\x9c\x2f\x70\x56\xc5\x8e\x4d\xa7\x03\x63\xc7\xd1\x34\xf4\xe2\xe3\xc0\x26\x41\xc3\x1e\xbc\x49\xae\xf7\xb3\x08\x21\x1f\xde\xd9\xa7\x48\xaa\xe8\x7a\xa3\xbb\xdc\xe9\x9c\xe7\xa6\x9c\xa7\x8f\x81\x51\x2e\xf1\x89\x7d\xe0\x01\xdf\x6a\x63\x59\x1d\x41\x53\x03\x12\xa0\x65\xbd\x43\xb5\x5c\xa8\x82\x4d\xdb\xa3\x62\x50\x79\x1e\x05\xeb\x1a\x35\xbd\x7a\xba\x64\xa2\x3e\xbd\xa1\x7a\x6e\x30\xab\x9b\xfa\x3c\x04\xe7\x13\xe8\x91\xca\x25\x3d\xd1\x65\x26\x78\x0a\xc8\x5c\xc8\xa7\x2e\x2a\xa7\xca\x16\xff\x4e\x95\xa1\xe0\x86\x5c\x51\x1e\xc8\x44\xf9\xe1\xa3\xe4\xa3\x5f\x82\x45\x33\x59\x9e\xd6\xb8\x6e\x5f\xe6\xfe\xe8\xee\xbc\xed\xff\x70\x8f\x13\x7b\xba\x73\xac\x6f\x72\x26\xc4\xb6\x3f\xc5\xfe\x10\x0c\x4b\xbd\xa2\xf1\x3a\x54\x5a\x8f\x72\x3e\xbe\x18\xa4\x5a\xfc\x40\xb8\x01\xd7\xcd\x26\x80\x2a\x9c\xc5\x66\x23\xa3\x77\x49\xc2\x76\xbb\x46\x6a\xd9\xab\xa2\xb8\x25\x13\x5d\x39\xa1\x76\x1d\x2a\x8f\x87\x95\xf4\x6f\xc3\xd6\x49\x9c\xaf\x00\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenv_fn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_fn_bash,
		"bashenv/fn.bash",
	)
}

func bashenv_fn_bash() (*asset, error) {
	bytes, err := bashenv_fn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1426170253, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _bashenv_plugn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdd\x6e\xdb\x36\x14\xbe\x96\x9e\xe2\x80\xd0\x8a\x66\x80\xe2\x24\xc3\xae\x82\x0c\x0b\xba\x2c\x33\x10\x0c\x86\x93\x62\x17\x5d\x11\x30\x12\x65\x13\xa5\x48\x41\x94\x9c\x74\xcb\xde\x7d\xe7\x88\x94\x2c\xb9\xb4\xd3\x36\x37\x36\x75\xfe\xf8\xf1\x3b\x3f\x64\xbc\x11\xb5\x95\x46\xbf\x3d\x82\x7f\xe3\x48\x64\x6b\x03\x27\xc7\xa7\xc7\x27\xe9\x63\xcd\xab\xf8\xbf\x38\x96\xda\x36\x5c\x29\xa7\xcf\x45\xa6\x78\x2d\x20\x17\x36\xbb\x60\x73\xa7\x02\x0e\x5a\x3c\x42\xa5\xda\x95\xd4\x50\xd4\xa6\x44\xc9\xb5\x6c\xe0\xfd\xf2\x86\x6d\x7d\xda\x5a\x5d\xb0\xe4\x94\x81\xe6\xa5\xc0\xd5\x19\xea\xb2\x1c\x58\xb2\xb8\x79\x7f\x3d\xff\xf3\x7e\x71\x79\xf7\xc7\x8c\x6f\xb8\x54\xfc\x41\x09\x54\xae\x30\x44\xa6\x8c\x16\x68\x83\xce\x0c\x92\xb3\xce\x23\x85\x5f\x60\x96\x8b\xcd\x4c\xb7\x4a\x11\xc4\x56\x1f\x00\xb9\x14\xa5\xd9\x88\x29\xba\x7e\x13\x2f\xb5\x23\x94\x4e\xd2\x01\x8d\xa3\xba\x84\xb4\x2e\x76\x20\x0a\x4d\xae\xf9\x2c\x71\xa6\xfb\xcc\x86\x4d\xb6\x86\x08\x55\x49\xdb\x84\x50\xde\xa0\x1c\x88\x4b\x65\x32\xae\x46\xb8\xec\xda\x54\x0d\xa4\x16\xe8\xb0\x2b\x65\x1e\xe2\xa8\x30\x35\x54\xbc\x59\x03\x9e\x67\xcf\x96\x3f\x9e\x43\x6e\xe2\x28\x1a\x47\xc3\x33\xbd\x7d\xe0\x56\x10\xfd\x90\x50\x80\x23\x36\x98\x20\x7d\x4d\x6b\xc9\xe4\xc3\x07\x48\x05\x1c\x3a\x31\x7c\xfc\x08\x6f\xde\x40\x57\x2b\x5e\x05\xcf\xcf\xee\x3b\x97\xb6\x13\x8c\x42\xfb\x02\xa3\xd8\x19\x6f\xdc\xce\x33\x17\xe9\xb8\x31\xa5\x82\x67\xa0\xbf\x74\x25\x1a\x60\x9e\x2a\x60\xde\x8b\x8d\x02\x39\xa6\xbe\x29\x0a\xb9\xd4\xb2\x6a\x86\x48\x55\x2d\x75\x83\xa9\x02\xf8\x21\x3d\x3b\xb1\xf8\xfb\x33\xfd\x9c\xd2\xd2\xfe\x4d\x2e\xc9\xe0\x9c\xf4\x18\x70\xe9\xf8\xa1\x15\x85\xa4\x7a\xc1\xba\x1c\xb2\xd3\x6e\xb3\x83\x39\x6e\x6a\xb9\x5a\x89\x3a\x94\xe6\x3b\xa7\xb2\xb0\x36\xe6\x13\xe5\xaf\xe7\xef\xcb\x42\x24\x8b\xae\x0c\xcf\xc1\xae\x65\xd1\xec\x2f\x05\x97\x94\xdd\x62\xe8\x93\xd6\x97\x82\xd8\x20\x85\xc4\x9e\xd1\x85\x5c\xa5\xe2\xa9\x32\x35\xf2\x38\x2e\x89\x2e\xd0\x51\xc7\x93\x2c\x80\x0a\xe1\x09\x92\xbf\x96\x97\x8b\xc5\xd5\xf2\xfe\xf6\xdd\x72\xbe\xb8\xa3\xc4\xa3\xb4\x67\x69\x96\x10\x4c\x86\x15\x71\x0e\xcd\x5a\x68\xf4\x8c\x9c\xe1\xfd\xef\xf3\x9b\xab\x8b\x5d\xbb\xdd\x68\x2c\xf9\x95\x76\x13\x6a\xd8\xef\x50\xe4\x89\xaa\xf7\x2d\xe4\xfe\x64\x44\x3e\x15\xe9\x8a\x37\xe2\x91\x7f\x86\x91\x27\x26\xca\x51\x14\xca\xd3\x55\xa7\xc1\x31\x36\xf4\x78\x70\x3e\x94\x9f\x72\x59\x43\x5a\x85\x27\x04\x1a\x28\x0d\x69\x61\x5f\x9c\x0c\x2f\x4f\x18\xa1\x0c\xcf\xfb\x63\x10\x76\xdf\x68\x21\xf0\xbf\x39\xd5\xeb\xd1\xe3\x5c\xfb\x76\x60\xbe\xbe\xb0\x0f\x43\xd8\xae\xb1\x3d\x7d\xc1\x3a\xc3\xb6\xe6\x5d\x77\x06\x31\x4e\xae\x0a\xec\xfa\x29\x1a\x17\xa0\xeb\x7e\x36\x69\xff\x11\xad\x14\x80\x8d\x60\xb9\xb2\x0f\xa6\xdc\x35\xc4\xd7\x83\xfb\x5a\x48\xbe\xd3\xd8\xf8\x1a\xf0\x68\x6c\x98\xa4\xdb\xef\x24\x09\xb0\xc5\x5b\x5a\xfe\xc4\xfc\x55\x9e\x6a\x1a\x63\x24\x1d\xe0\x58\x71\x10\x74\x90\x3c\xa9\x65\x10\xe8\x1c\xe5\x92\x2b\xf9\x0f\x16\x1b\xce\xb2\xb2\x6a\x3e\xf7\xc0\x69\x3e\xef\xad\x31\x54\x34\xa6\xcd\xd6\x07\x80\xf4\xae\xfb\x6a\x33\xa4\x1d\x3f\x1e\xba\xe3\x8f\x00\xe6\x1e\xde\x02\xe1\xe9\x31\xc8\xdd\xc1\xd9\x1d\xf8\xde\x9a\xb6\xce\x82\xdd\x75\xdb\x69\x30\x31\x65\xc9\x75\x6e\x81\x46\x70\x67\xbd\xf3\xa0\x78\xcd\xb4\x06\x88\x22\x1a\x87\xc5\x68\x1c\x7e\x39\xa8\x8f\xed\x9a\x8d\xef\x62\xe6\x40\xc3\x0b\x2e\x07\xef\xae\x92\x4b\xff\x14\xa4\x3a\x49\x85\x81\x4a\x56\xa2\x40\x5e\xcf\x69\x40\xb3\xe4\x6e\x79\xf9\xee\xaa\xdf\xb6\xb3\x79\x8a\xb1\x13\xca\xbc\xaf\x73\x7f\x69\x4e\x64\xfe\x79\x36\x91\x0d\x8f\xb6\x89\x94\xde\x47\x13\x81\x9f\xe0\x13\x99\x23\x6b\x22\xf2\xe3\x70\x22\xf3\x49\xec\x79\x61\x63\x65\xaa\xad\xef\x2d\x60\x8b\x70\xab\x8d\x22\x6d\x67\x5a\x48\xec\xbe\x42\x1a\xbb\xe3\x40\x7d\xe4\xd9\xc2\xfd\x19\xeb\x6f\xa2\xff\x03\x00\x00\xff\xff\x83\x6d\xba\x21\x85\x0b\x00\x00")

func bashenv_plugn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_plugn_bash,
		"bashenv/plugn.bash",
	)
}

func bashenv_plugn_bash() (*asset, error) {
	bytes, err := bashenv_plugn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/plugn.bash", size: 2949, mode: os.FileMode(420), modTime: time.Unix(1426499645, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash": bashenv_bash_bash,
	"bashenv/cmd.bash": bashenv_cmd_bash,
	"bashenv/fn.bash": bashenv_fn_bash,
	"bashenv/plugn.bash": bashenv_plugn_bash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"bashenv": &_bintree_t{nil, map[string]*_bintree_t{
		"bash.bash": &_bintree_t{bashenv_bash_bash, map[string]*_bintree_t{
		}},
		"cmd.bash": &_bintree_t{bashenv_cmd_bash, map[string]*_bintree_t{
		}},
		"fn.bash": &_bintree_t{bashenv_fn_bash, map[string]*_bintree_t{
		}},
		"plugn.bash": &_bintree_t{bashenv_plugn_bash, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

